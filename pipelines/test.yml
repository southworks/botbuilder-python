pool:
  vmImage: 'windows-2019'

variables:
  AppId: $(SlackTestBotAppId)
  AppSecret: $(SlackTestBotAppSecret)
  BotGroup: $(SlackTestBotBotGroup)
  BotName: $(SlackTestBotBotName)
  BuildConfiguration: 'debug'
  BuildPlatform: 'any cpu'
  SlackBotToken: $(SlackTestBotSlackBotToken)
  SlackClientSigningSecret: $(SlackTestBotSlackClientSigningSecret)
  SlackVerificationToken: $(SlackTestBotSlackVerificationToken)
#  AzureSubscription: define this in Azure
#  SlackTestBotAppId: define this in Azure
#  SlackTestBotAppSecret: define this in Azure
#  SlackTestBotBotGroup: define this in Azure
#  SlackTestBotBotName: define this in Azure
#  SlackTestBotSlackBotToken: define this in Azure
#  SlackTestBotSlackChannel: define this in Azure
#  SlackTestBotSlackClientSigningSecret: define this in Azure
#  SlackTestBotSlackVerificationToken: define this in Azure

steps:
# - task: AzureCLI@2
#   displayName: 'create Azure resources - new RG template'
#   inputs:
#     azureSubscription: $(AzureSubscription)
#     scriptType: pscore
#     scriptLocation: inlineScript
#     inlineScript: |
#       Set-PSDebug -Trace 1;
#       # set up resource group, bot channels registration, app service, app service plan
#       az deployment sub create --name "$(BotName)$(Build.BuildId)" --template-file "$(System.DefaultWorkingDirectory)/libraries/functional-tests/slackbot/deploymentTemplates/template-with-new-rg.json" --location "westus" --parameters groupName="$(BotGroup)" appId="$(AppId)" appSecret="$(AppSecret)" botId="$(BotName)" botSku="F0" newAppServicePlanName="$(BotName)" newWebAppName="$(BotName)-$(Build.BuildId)" slackVerificationToken="$(SlackVerificationToken)" slackBotToken="$(SlackBotToken)" slackClientSigningSecret="$(SlackClientSigningSecret)" groupLocation="westus" newAppServicePlanLocation="westus";
#       Set-PSDebug -Trace 0;

# - script: |
#     git config --global user.name "GitPythonDeploymentUser"
#     git config --global user.email GitPythonDeploymentUser@Pipeline.com
#     git init
#     git add .
#     git commit -m "cibuildtest"
#     git remote add azure https://$(AzureDeploymentUser):$(AzureDeploymentPassword)@$(BotName)-$(Build.BuildId).scm.azurewebsites.net:443/$(BotName)-$(Build.BuildId).git
#     git push azure master
#   workingDirectory: '$(System.DefaultWorkingDirectory)/libraries/functional-tests/slackbot'
#   displayName: 'Git bot deployment'

# - task: AzureCLI@2
#   displayName: 'Validate git deployment'
#   inputs:
#     azureSubscription: $(AzureSubscription)
#     scriptType: pscore
#     scriptLocation: inlineScript
#     inlineScript: |
#       #Getting logs from Azure
#       az webapp log download --name $(BotName)-$(Build.BuildId) --resource-group $(BotName)-rg --log-file "$(System.DefaultWorkingDirectory)\logs.zip";
#       Expand-Archive "$(System.DefaultWorkingDirectory)\logs.zip" -DestinationPath "$(System.DefaultWorkingDirectory)\logs";
#       $file = "$(System.DefaultWorkingDirectory)/logs/deployments/*/log.log"
#       $content = Get-Content $file

#       #Validates if the log contains the Deployment successful line
#       Write-Host "Validating deployment log."
#       $containsWord = $content | %{$_ -match "Deployment successful"}
#       if ($containsWord -contains $true) {
#           Write-Host "Deployment successful, check the git deploy step for more information."
#       } else {
#           Write-Host "An error occurred during the deploy."
#           Write-Output $content
#           Write-Error "An error occurred during the deploy."
#       }
#   condition: succeededOrFailed()

# - script: |
#     python -m pip install --upgrade pip
#     pip install -r ./libraries/functional-tests/tests/requirements.txt
#     pip install pylint==2.4.4
#     pip install black==19.10b0
#     pip install pytest
#   displayName: 'Install dependencies'

- task: AzureCLI@1
  displayName: 'Delete Resources'
  inputs:
    azureSubscription: $(AzureSubscription)
    scriptLocation: inlineScript
    inlineScript: 'call az group delete -n "$(BotGroup)" --yes'
  condition: and(always(), ne(variables['DeleteResourceGroup'], 'false'))
